// Copyright (c) 2018 RocketChicken Interactive Inc.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;

using Motive.Core.Json;
using Motive.Core.Scripting;
using Motive.Unity.Gaming;

namespace Motive.Gaming.Models
{
    /// <summary>
    /// A collection of collectibles and currencies.
    /// </summary>
    public class ValuablesCollection : ScriptResource
    {
        public CollectibleCount[] CollectibleCounts { get; set; }
        public CurrencyCount[] CurrencyCounts { get; set; }
        public ValuablesCollection() : base("valuablesCollection") { }

        public int GetCurrencyCount(string currency)
        {
            if (CurrencyCounts != null)
            {
                var cc = CurrencyCounts.Where(_cc => _cc.Currency == currency).FirstOrDefault();

                if (cc != null)
                {
                    return cc.Count;
                }
            }

            return 0;
        }

        public int GetCollectibleCount(string collectibleId)
        {
            if (CollectibleCounts != null)
            {
                var cc = CollectibleCounts.Where(_cc => _cc.CollectibleId == collectibleId).FirstOrDefault();

                if (cc != null)
                {
                    return cc.Count;
                }
            }

            return 0;
        }

        public Collectible GetFirstCollectible()
        {
            if (CollectibleCounts != null && CollectibleCounts.Length > 0)
            {
                return CollectibleCounts[0].Collectible;
            }

            return null;
        }

        public static Collectible GetFirstCollectible(ValuablesCollection vc)
        {
            if (vc == null)
            {
                return null;
            }

            return vc.GetFirstCollectible();
        }

        public IEnumerable<CollectibleSet> GetCollectibleSets()
        {
            if (CollectibleCounts != null)
            {
                return CollectibleCounts.Where(cc => cc.Collectible != null).Select(cc => new CollectibleSet { Collectible = cc.Collectible, Count = cc.Count });
            }

            return new CollectibleSet[0];
        }

        public static IEnumerable<CollectibleSet> GetCollectibleSets(ValuablesCollection valuables)
        {
            if (valuables == null || valuables.CollectibleCounts == null)
            {
                return new CollectibleSet[0];
            }

            return valuables.GetCollectibleSets();
        }

    }
}