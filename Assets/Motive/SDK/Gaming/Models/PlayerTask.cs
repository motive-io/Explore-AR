// Copyright (c) 2018 RocketChicken Interactive Inc.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Motive.Core.Json;
using Motive.Core.Scripting;
using Motive.Core.Globalization;
using Motive.Core.Models;

namespace Motive.Gaming.Models
{
    /// <summary>
    /// Attributes that effect the behavior of tasks.
    /// </summary>
    public static class PlayerTaskAttributes
    {
        public const string Hidden = "hidden";
        public const string Autoplay = "autoplay";
        public const string Modal = "modal";
    }

    /// <summary>
    /// Base class for all tasks.
    /// </summary>
    public class PlayerTask : ScriptResource, IMediaItemProvider
    {
        public string Title { get { return LocalizedText.GetText(LocalizedTitle); } }
        public string Description { get { return LocalizedText.GetText(LocalizedDescription); } }
        /// <summary>
        /// The items that the player is taking the specified action on.
        /// </summary>
        public ValuablesCollection ActionItems { get; set; }
        /// <summary>
        /// Optional reward that the player receives for doing the task.
        /// </summary>
        public ValuablesCollection Reward { get; set; }
        /// <summary>
        /// The action the player is taking.
        /// </summary>
        public string Action { get; set; }
        /// <summary>
        /// Optional attributes for the task.
        /// </summary>
        public string[] Attributes { get; set; }
        /// <summary>
        /// Used by some Motive apps to put a time limit on the task.
        /// </summary>
        public ScriptTimer Timeout { get; set; }
        /// <summary>
        /// If set, the task can be replayed.
        /// </summary>
        public bool IsReplayable { get; set; }

        public LocalizedText LocalizedTitle { get; set; }
        public LocalizedText LocalizedDescription { get; set; }
        public LocalizedMedia LocalizedImage { get; set; }
        public TaskObjective[] Outcomes { get; set; }

        /// <summary>
        /// Optional minigame that describes "how" the task is to be performed.
        /// </summary>
        public ITaskMinigame Minigame { get; set; }

        public bool IsHidden { get { return HasAttribute(PlayerTaskAttributes.Hidden); } }

        public bool IsAutoplay { get { return HasAttribute(PlayerTaskAttributes.Autoplay); } }

        public bool IsModal { get { return HasAttribute(PlayerTaskAttributes.Modal); } }

        public virtual string ImageUrl
        {
            get
            {
                var item = LocalizedMedia.GetMediaItem(LocalizedImage);

                if (item != null)
                {
                    return item.Url;
                }

                return null;
            }
        }

        public virtual string ImageTitle
        {
            get
            {
                var media = LocalizedMedia.GetMediaItem(LocalizedImage);

                return media != null ? media.Title : null;
            }
        }

        public bool HasAttribute(string attribute)
        {
            if (Attributes != null)
            {
                return Attributes.Contains(attribute);
            }

            return false;
        }

        public PlayerTask(string resourceType) : base(resourceType)
        {
        }

        public PlayerTask() : this("motive.gaming.playerTask")
        { 
        }

        public virtual void GetMediaItems(IList<Motive.Core.Media.MediaItem> items)
        {
            var provider = Minigame as IMediaItemProvider;

            if (provider != null)
            {
                provider.GetMediaItems(items);
            }

            if (LocalizedImage != null)
            {
                LocalizedImage.GetMediaItems(items);
            }
        }
    }
}