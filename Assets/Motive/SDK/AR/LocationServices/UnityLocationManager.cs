// Copyright (c) 2018 RocketChicken Interactive Inc.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using Motive.AR.LocationServices;
using Motive.Unity.Utilities;
using Motive.Core.Diagnostics;

namespace Motive.AR.LocationServices
{
    public class UnityLocationManager : MonoBehaviour, ILocationManager
    {
        // Need to do this for IOS: aot cross-compile breaks with compiled event adding
        //LocationManagerEventHandler m_updatedEventHandler;

        public LocationReading LastReading { get; private set; }

        public event EventHandler<LocationUpdaterEventArgs> LocationUpdated;

        /*
        {
            add { m_updatedEventHandler = (LocationManagerEventHandler)Delegate.Combine(m_updatedEventHandler, value); }
            remove { m_updatedEventHandler = (LocationManagerEventHandler)Delegate.Remove(m_updatedEventHandler, value); }
        }*/

        bool m_running;
        bool m_didStartLocationServices;
        Motive.Core.Diagnostics.Logger m_logger;

        void Awake()
        {
            m_logger = new Motive.Core.Diagnostics.Logger(this);
        }

        void ILocationManager.Start()
        {
            m_logger.Debug("Start");

            m_running = true;
            m_didStartLocationServices = false;
        }

        public void Stop()
        {
            m_running = false;
        }

        public double Accuracy
        {
            get;
            set;
        }

        public double UpdateDistance
        {
            get;
            set;
        }

        public bool EnableBackgroundUpdates
        {
            get;
            set;
        }

        public UnityLocationManager()
        {
        }

        static DateTime GetTimestamp(double seconds)
        {
            long ticks = (long)(seconds * 1000) * TimeSpan.TicksPerMillisecond;
            ticks += new DateTime(1970, 1, 1).Ticks;
            return new DateTime(ticks);
        }

        public void DebugSetPosition(Coordinates coordinates)
        {
            LocationReading reading = new LocationReading(
                coordinates, 0, 0, 0, DateTime.Now);

            LastReading = reading;

            if (LocationUpdated != null)
            {
                LocationUpdated(this, new LocationUpdaterEventArgs(reading));
            }
        }

        void Update()
        {
            LocationReading reading = null;

            if (m_running)
            {
                if (ApplicationHelper.IsMobile)
                {
                    if (!m_didStartLocationServices)
                    {
                        m_logger.Debug("Starting location services");

                        Input.location.Start();
                        m_didStartLocationServices = true;
                    }

                    if (Input.location.status == LocationServiceStatus.Running)
                    {
                        Coordinates coordinates = new Coordinates
                        {
                            Latitude = Input.location.lastData.latitude,
                            Longitude = Input.location.lastData.longitude
                        };

                        reading = new LocationReading(
                            coordinates,
                            Input.location.lastData.altitude,
                            Input.location.lastData.horizontalAccuracy,
                            Input.location.lastData.verticalAccuracy,
                            GetTimestamp(Input.location.lastData.timestamp));
                    }
                }
                else
                {
                    reading = LastReading;
                }

                if (reading != null && LocationUpdated != null)
                {
                    if (LastReading != null && LastReading.Timestamp == reading.Timestamp)
                    {
                        return;
                    }

                    LastReading = reading;

                    LocationUpdated(this, new LocationUpdaterEventArgs(reading));
                }
            }
            else
            {
                // !m_running
                if (ApplicationHelper.IsMobile)
                {
                    if (Input.location.status == LocationServiceStatus.Running)
                    {
                        m_didStartLocationServices = false;
                        Input.location.Stop();
                    }
                }
            }
        }
    }
}