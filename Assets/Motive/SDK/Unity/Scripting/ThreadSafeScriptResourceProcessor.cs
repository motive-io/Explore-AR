// Copyright (c) 2018 RocketChicken Interactive Inc.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Motive.Core.Scripting;
using Motive.Unity.Utilities;
using System;

namespace Motive.Unity.Scripting
{
    /// <summary>
    /// A ScriptResourceProcessor that makes all calls on the Unity thread.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public class ThreadSafeScriptResourceProcessor<T> : IScriptResourceProcessor where T : class, IScriptObject
    {
        public ThreadSafeScriptResourceProcessor()
        {
        }

        public virtual void ActivateResource(ResourceActivationContext context, T resource)
        {
        }

        public virtual void DeactivateResource(ResourceActivationContext context, T resource)
        {
        }

        public virtual void UpdateResource(ResourceActivationContext context, T resource)
        {
        }

        public virtual void ActivateResource(ResourceActivationContext context, T resource, Action onComplete)
        {
            ActivateResource(context, resource);

            if (onComplete != null)
            {
                onComplete();
            }
        }

        public virtual void DeactivateResource(ResourceActivationContext context, T resource, Action onComplete)
        {
            DeactivateResource(context, resource);

            if (onComplete != null)
            {
                onComplete();
            }
        }

        public virtual void ResetResource(ResourceActivationContext context, T resource, Action onComplete)
        {
            ResetResource(context, resource);

            if (onComplete != null)
            {
                onComplete();
            }
        }

        public virtual void ResetResource(ResourceActivationContext context, T resource)
        {
            DeactivateResource(context, resource);
        }

        public void ActivateResource(ResourceActivationContext context, IScriptObject resource, Action onComplete)
        {
            T typed = resource as T;

            if (typed != null)
            {
                ThreadHelper.Instance.CallOnMainThread(() =>
                {
                    ActivateResource(context, typed, onComplete);
                });
            }
        }

        public void DeactivateResource(ResourceActivationContext context, IScriptObject resource, Action onComplete)
        {
            T typed = resource as T;

            if (typed != null)
            {
                ThreadHelper.Instance.CallOnMainThread(() =>
                {
                    DeactivateResource(context, typed, onComplete);
                });
            }
        }

        public void ResetResource(ResourceActivationContext context, IScriptObject resource, Action onComplete)
        {
            T typed = resource as T;

            if (typed != null)
            {
                ThreadHelper.Instance.CallOnMainThread(() =>
                {
                    ResetResource(context, typed, onComplete);
                });
            }
        }


        public void UpdateResource(ResourceActivationContext context, IScriptObject resource)
        {
            T typed = resource as T;

            if (typed != null)
            {
                ThreadHelper.Instance.CallOnMainThread(() =>
                {
                    UpdateResource(context, typed);
                });
            }
        }


        public virtual void BeginOperation()
        {
        }

        public virtual void EndOperation()
        {
        }
    }
}
